<rss version="2.0"><channel>
	<title>Oliver Webb&#39;s Website</title>
	<link>http://localhost:1313/categories/</link>
	<language>en-us</language>
	
	<item><title>Migrating to Hugo</title>
		<link>http://localhost:1313/articles/hugo/</link>
		<pubDate>Sun, 18 Aug 2024 12:00:34 -0500</pubDate>
		<description>&lt;p&gt;This website now runs on &lt;a href=&#34;https://gohugo.io&#34;&gt;hugo&lt;/a&gt;. I migrated the infrastructure off the old static
site generator that was written in Makefile.&lt;/p&gt;
&lt;h2 id=&#34;why&#34;&gt;Why?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;My static site generator isn&amp;rsquo;t that unique, &lt;a href=&#34;https://pedantic.software/git/blogit&#34;&gt;blogit&lt;/a&gt; already exists.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can do cool things with hugo that you can&amp;rsquo;t with other SSG&amp;rsquo;s (Better markdown compiler, templating, etc)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hugo isn&amp;rsquo;t &lt;em&gt;that&lt;/em&gt; large compared to other web frameworks&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;what-i-dont-like&#34;&gt;What I don&amp;rsquo;t like.&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Isn&amp;rsquo;t generalized enough&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mystified language to make it&amp;rsquo;s features sound cooler&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;archetype&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;hugo new content&lt;/code&gt; template&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;shortcode&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Macro&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;partial&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Template that isn&amp;rsquo;t a whole webpage&lt;/dd&gt;
&lt;dt&gt;_default&lt;/dt&gt;
&lt;dd&gt;Base templates&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;markdown-playground&#34;&gt;Markdown playground&lt;/h2&gt;
&lt;p&gt;Insert emojis: &amp;#x1f44b;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;mark&gt;highlighted text&lt;/mark&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;super&lt;sup&gt;scripts&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;del&gt;Strike-through&lt;/del&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;ins&gt;Underlined&lt;/ins&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Referring&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Checkboxes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Checkboxes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#ff7b72&#34;&gt;void&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34; display highlighted code&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;View github gists:
&lt;script src=&#34;https://gist.github.com/oliverkwebb/8b05751e685a01c6a2c71c2a8de69052.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/about/features/&#34;&gt;And many more&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;To footnotes&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description></item>
	
	<item><title>GNU considered harmful (By me, here&#39;s why)</title>
		<link>http://localhost:1313/articles/gnulist/</link>
		<pubDate>Sat, 17 Aug 2024 00:00:00 &#43;0000</pubDate>
		<description>&lt;p&gt;This list does not mention the [Richard Stallman controversy]&amp;lt;Link to Drew DeVault article here&amp;gt;.
Nor his squabbles related to &lt;a href=&#34;https://sourceware.org/legacy-ml/libc-hacker/2000-06/msg00233.html&#34;&gt;glibc&lt;/a&gt;
because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Most-everybody knows about it&lt;/li&gt;
&lt;li&gt;These are related to RMS &lt;em&gt;specificly&lt;/em&gt;, not his broader actions to influence the GNU project.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-the-linux-was-developed-for-the-gnu-tools-narritive-propogated-by-the-fsf-is-false&#34;&gt;1. The &amp;ldquo;Linux was developed for the GNU tools&amp;rdquo; narritive propogated by the FSF is false&lt;/h2&gt;
&lt;p&gt;From &lt;a href=&#34;https://www.gnu.org/gnu/linux-and-gnu.html&#34;&gt;https://www.gnu.org/gnu/linux-and-gnu.html&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;its users looked around for other free software to go with it, and found that (for no particular reason) most everything necessary to make a Unix-like system was already available.
What they found was no accidentâ€”it was the not-quite-complete GNU system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;In Linus&amp;rsquo;s book &lt;em&gt;&lt;a href=&#34;https://books.google.com/books/about/Just_for_Fun.html?id=Q3aIPwAACAAJ&#34;&gt;Just For Fun&lt;/a&gt;&lt;/em&gt;, the GNU project plays little to no role in the creation of Linux.
Linux grew out of comp.os.minix, not anything related to the FSF or GNU project. Additionally, The FSF was
still advocating for Hurd until well after Linux was popular.&lt;/p&gt;
&lt;p&gt;From &lt;em&gt;&lt;a href=&#34;https://web.archive.org/web/19980126191050/http://www.gnu.org/software/hurd/hurd-and-linux.html&#34;&gt;The Hurd and Linux (1997)&lt;/a&gt;&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;But we did start the Hurd, back then, and now we have made it work. We hope its superior architecture will make free operating systems more powerful.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;The FSF&amp;rsquo;s push for hurd died out sometime in the early 2000&amp;rsquo;s, when Linux was commonplace and Hurd was completely abandoned.&lt;/p&gt;
&lt;p&gt;From &lt;a href=&#34;https://karmak.org/archive/2003/01/12-14-99.epl.html&#34;&gt;A interview with RMS in 99&amp;rsquo;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Yes. Unfortunately, progress right now is very slow. We don&amp;rsquo;t have anybody working on it full time, and I wish we did.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-for-years-the-gnu-project-was-not-directly-maintaining-most-of-their-popular-projects&#34;&gt;2. For years, the GNU project was not directly maintaining most of their popular projects&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For several years in the &amp;rsquo;90s and &amp;rsquo;00s, GCC, Binutils, GDB, and other FSF projects were being maintained by a external company called &lt;a href=&#34;https://en.wikipedia.org/wiki/Cygnus_Solutions&#34;&gt;Cygnus&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The GCC compiler died and forked into EGCS, which then reunited into GCC and is now controlled via committee.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The de-facto libc on linux for years was a fork of glibc, called &lt;a href=&#34;https://www.man7.org/linux/man-pages/man7/libc.7.html&#34;&gt;Linux libc&lt;/a&gt; (more commonly refereed to as libc5/libc4).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The FSF, to this day, still does not have direct authoritative control over the GCC compiler.&lt;/p&gt;
&lt;h2 id=&#34;3-the-fsf-intentionally-makes-code-less-modular-to-spread-itself&#34;&gt;3. The FSF intentionally makes code less modular to spread itself&lt;/h2&gt;
&lt;p&gt;The reason why GCC didn&amp;rsquo;t become a platform for compiler development like LLVM or qbe is because &lt;strong&gt;the FSF
intentionally kept it back from being so.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From &lt;a href=&#34;https://gcc.gnu.org/legacy-ml/gcc/2000-01/msg00572.html&#34;&gt;https://gcc.gnu.org/legacy-ml/gcc/2000-01/msg00572.html&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Anything that makes it easier to use GCC back ends without GCC front
ends&amp;ndash;or simply brings GCC a big step closer to a form that would make
such usage easy&amp;ndash;would endanger our leverage for causing new front
ends to be free.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;The FSF is a political movement that engages in intentional obfuscation to spread itself.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-glibcs-feature-test-macros-are-designed-so-that-people-would-mark-their-code-with-the-gnu-projects-name&#34;&gt;4. glibc&amp;rsquo;s feature test macros are designed so that people would mark their code with the GNU projects name&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.man7.org/linux/man-pages/man7/feature_test_macros.7.html&#34;&gt;feature_test_macros&lt;/a&gt; are a opt-out, functionality removing, non-portable feature that was largely pioneered
by glibc.&lt;/p&gt;
&lt;p&gt;glibc gives you a few test macros by default (which most of the base functions are under).
But If you wanna include something like &lt;code&gt;strptime()&lt;/code&gt; you need to &lt;code&gt;#define _XOPEN_SOURCE&lt;/code&gt;
(which is &lt;a href=&#34;https://pubs.opengroup.org/onlinepubs/9799919799/&#34;&gt;against POSIX&lt;/a&gt;), except if you do that it &lt;strong&gt;turns the default ones off.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;However, if &lt;code&gt;#define _GNU_SOURCE&lt;/code&gt;, all feature test macros are implicitly defined.
So &lt;em&gt;the most convenient way to deal with this opt-out &amp;ldquo;feature&amp;rdquo;&lt;/em&gt; is to mark your code with the
GNU projects name.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;dup3()&lt;/code&gt; system call is neither written by GNU or even in the &amp;ldquo;GNU Operating System&amp;rsquo;s&amp;rdquo;
Hurd kernel. And even though this is not GNU you still have to &lt;code&gt;#define _GNU_SOURCE&lt;/code&gt; to get it.&lt;/p&gt;
&lt;h2 id=&#34;5-gnu-code-sucks&#34;&gt;5. GNU code &lt;em&gt;sucks&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;true&lt;/code&gt; command (which is only supposed to return 0) in most other utility implementations is 1 line of
code (i.e. &lt;code&gt;int main(){}&lt;/code&gt;), GNU true is &lt;a href=&#34;https://github.com/coreutils/coreutils/blob/master/src/true.c&#34;&gt;80 lines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Note: the &amp;ndash;help text support is actually a bug and possible security issue, because &lt;code&gt;/bin/true --help &amp;gt; /dev/full&lt;/code&gt; returns 1 instead of 0)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GNU cat is &lt;a href=&#34;https://github.com/coreutils/coreutils/blob/master/src/cat.c&#34;&gt;813 lines of code&lt;/a&gt;, Busybox cat is
&lt;a href=&#34;https://git.busybox.net/busybox/tree/coreutils/cat.c&#34;&gt;217 lines&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;glibc can take up to &lt;a href=&#34;https://linuxfromscratch.org/lfs/downloads/11.0/LFS-BOOK-11.0.pdf&#34;&gt;3 days (See end of pg. 34)&lt;/a&gt; to build on low-end hardware&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Many GNU libraries such as &lt;a href=&#34;https://stackoverflow.com/questions/57476533/why-is-statically-linking-glibc-discouraged&#34;&gt;glibc&lt;/a&gt; and &lt;a href=&#34;https://bugzilla.gnome.org/show_bug.cgi?id=768215#c16&#34;&gt;glib&lt;/a&gt; do not support static linking for no good reason&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I could point out more examples, but the message is conveyed that where a programmer might need 10 lines of code to do a job, a GNU programmer would need 100. I have yet to find someone who favors the GNU syntax style. And GNU code is filled with ifdefs, unneeded indirection and complexity, etc (read some yourself, pick a GNU project, any GNU project).&lt;/p&gt;
&lt;h2 id=&#34;6-gnus-obsession-with-portability-adds-copius-amounts-of-complexity-and-helps-no-one&#34;&gt;6. GNUs obsession with portability adds copius amounts of complexity and helps no one&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&#34;https://invisible-island.net/ncurses/ncurses.faq.html#which_terminfo&#34;&gt;terminfo/termcap&lt;/a&gt; databases
contain support for thousands of different terminals and terminal emulators no one uses (You can try this
out now, set &lt;code&gt;TERM=vt100&lt;/code&gt; and run some ncurses programs). Terminal escape protocols have been more or less
standardized since ANSI escape codes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;reset&lt;/code&gt; command waits one second to support &lt;a href=&#34;https://unix.stackexchange.com/questions/335648/why-does-the-reset-command-include-a-delay&#34;&gt;physical terminals&lt;/a&gt; that fell out of favor for emulated ones in the early 90&amp;rsquo;s. It does not contain a check for whether or not the terminal is emulated, and will sleep regardless.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Portability concerns for &amp;ldquo;old versions of csh on System V&amp;rdquo; are &lt;a href=&#34;https://www.gnu.org/software/bash/manual/bash.html#Installing-Bash&#34;&gt;still included in the bash manual&lt;/a&gt;, and the autotools still check for portability concerns from the &amp;rsquo;80s and &amp;rsquo;90s&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more examples of this, lets look at the configure scripts for some of the GNU programs.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The 23,000 line bash configure script contains portability checks for a bash version released in 1997 within &lt;a href=&#34;https://github.com/bminor/bash/blob/master/configure#L67C29-L67C38&#34;&gt;the first 100 lines.&lt;/a&gt;, further down it has checks for a &lt;a href=&#34;https://github.com/bminor/bash/blob/master/configure#L596C29-L596C35&#34;&gt;version of System V released in 1988&lt;/a&gt;, and &lt;a href=&#34;https://github.com/bminor/bash/blob/master/configure#L22254&#34;&gt;&amp;ldquo;pre-3.0 UWIN ksh&amp;rdquo;&lt;/a&gt; which from my searching became outdated in 2002.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The 13,000 line gawk configure script (Along with containing about half the portability checks from bash) contains checks for Solaris 7 (released in 1997) &lt;a href=&#34;https://github.com/forkmirror/gawk/blob/master/configure&#34;&gt;in the first 50 lines&lt;/a&gt;, &lt;a href=&#34;https://github.com/forkmirror/gawk/blob/master/configure#L39C34-L39C43&#34;&gt;Someone running a 386/AT Machine apparently had a issue&lt;/a&gt;. Oh no! &lt;a href=&#34;https://github.com/forkmirror/gawk/blob/master/configure#L11088&#34;&gt;IRIX 5.2 (1993) doesn&amp;rsquo;t support -lsocket&lt;/a&gt;. &lt;a href=&#34;https://github.com/forkmirror/gawk/blob/master/configure#L2651&#34;&gt;This entire comment block&lt;/a&gt; needs no introduction.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This matters in the modern world of software how?&lt;/p&gt;
&lt;p&gt;I note that I picked these 2 at random and I&amp;rsquo;m not searching hard. These are everywhere and I&amp;rsquo;m sure I could
find many more, No one is building modern versions of bash or the version of gawk from 2021 that Github
mirror provides on System V machines, nor IRIX, Solaris, 386, AIX or even Hurd.&lt;/p&gt;
&lt;h2 id=&#34;7-the-fsf-fractured-the-open-source-world-for-no-good-reason&#34;&gt;7. The FSF fractured the Open Source world for no good reason&lt;/h2&gt;
&lt;p&gt;Nothing is &lt;em&gt;wrong&lt;/em&gt; with the GPLv2, there aren&amp;rsquo;t any loopholes in it. And most of the people I see using it
(including myself for a while) just used it because &amp;ldquo;The number is bigger therefore it must be even more free than last time&amp;rdquo; and/or they want compatibility with other GPLv3 code.&lt;/p&gt;
&lt;p&gt;If you ask someone to explain the general tenants of the GPLv2 and GPLv3, 90% of the time they come up
with identical answers (&amp;ldquo;Permitted source code distribution with no non-GPL forks&amp;rdquo;). Yes there are reasons
why GPLv3 was created such as DRM and Torrenting, but there wasn&amp;rsquo;t large spread exploitation of the GPLv2 to
spread proprietary software in the same way that MINIX became the infrastructure for spyware with the IME.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;However&lt;/strong&gt;, The split between the GPLv2 and GPLv3 was infinitely more harmful to the FOSS world than anything it was
conceptually supposed to prevent. The days of codesharing between open-source code without checking the license to make sure it isn&amp;rsquo;t illegal to do so are gone.&lt;/p&gt;
&lt;p&gt;A benefit of open source over proprietary software is &lt;a href=&#34;https://www.catb.org/~esr/writings/taoup/html/ch16s01.html&#34;&gt;code-sharing between projects&lt;/a&gt;. And this isn&amp;rsquo;t as effective when there are multiple incompatible open
source licenses that can&amp;rsquo;t legally share code.&lt;/p&gt;
&lt;h2 id=&#34;8-gnu-pushes-incecently-for-texinfo-a-format-no-one-likes-or-uses&#34;&gt;8. GNU pushes incecently for texinfo, a format no one likes or uses.&lt;/h2&gt;
&lt;p&gt;GNU info was designed to solve a problem nobody had, and in their push for it they made man pages &lt;a href=&#34;https://www.youtube.com/watch?v=rGSZFmQuQrU&#34;&gt;worse&lt;/a&gt;, which did create a problem, and when people who didn&amp;rsquo;t wanna use GNU info, they created their &lt;a href=&#34;https://cheat.sh&#34;&gt;own solutions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s documentation, not a website. I don&amp;rsquo;t need hyperlinks more than I need the ability to search the whole
thing for a specific phrase. If you really need to split your man page up into multiple blocks there are
so many features, it&amp;rsquo;s more useful to everyone involved to go the &lt;a href=&#34;https://linux.die.net/man/1/zsh&#34;&gt;zsh or ffmpeg rout&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;GNU info is not portable to other operating systems like man pages, nor well used even by most GNU projects,
nor is the browser you need to get a benefit out of its format pleasant to use. Nor is it liked even within the GNU project.
This does not change the fact GNU help2man by default refers to info pages in it&amp;rsquo;s output.&lt;/p&gt;
&lt;p&gt;The reason why most man pages don&amp;rsquo;t contain examples is because the GNU project insisted on putting them only in
texinfo pages and not converting them to man pages. And the normalization of this makes man pages worse for
everyone.&lt;/p&gt;
</description></item>
	
	<item><title>Writing a UTF-8 safe AWK</title>
		<link>http://localhost:1313/articles/utfawk/</link>
		<pubDate>Fri, 26 Apr 2024 00:00:00 &#43;0000</pubDate>
		<description>&lt;p&gt;One of the things the toybox project prioritizes is unicode handling for it&amp;rsquo;s
applications. This has kept things like &lt;a href=&#34;http://lists.landley.net/pipermail/toybox-landley.net/2023-October/029845.html&#34;&gt;the fully GNU compatible tr&lt;/a&gt;
from being promoted from the pending/ directory for years because they
wish to break compatibility by making tr unicode safe. Toybox&amp;rsquo;s plans for awk
are &lt;a href=&#34;http://lists.landley.net/pipermail/toybox-landley.net/2021-June/012453.html&#34;&gt;no different story&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Fortunately for any &lt;a href=&#34;https://www.github.com/raygard/wak&#34;&gt;awk implementation&lt;/a&gt;
attempting to get into toybox; Awk works with strings, while tr works with
characters. Awk does not regularly index into the strings it works with, and
when it does it only happens in a few functions. This means that if we want
to handle UTF-8, we can divide and conquer.&lt;/p&gt;
&lt;h3 id=&#34;what-a-utf-8-safe-awk-needs&#34;&gt;What a UTF-8 Safe awk needs&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://man7.org/linux/man-pages/man1/gawk.1.html&#34;&gt;gawk(1) man page&lt;/a&gt; says
these 4 functions work on &amp;ldquo;characters, not bytes&amp;rdquo;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;substr()&lt;/li&gt;
&lt;li&gt;length()&lt;/li&gt;
&lt;li&gt;match()&lt;/li&gt;
&lt;li&gt;index()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second addition awk book also mentions these:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;printf %c [STRING]&lt;/li&gt;
&lt;li&gt;printf %c [CODEPOINT]&lt;/li&gt;
&lt;li&gt;\u[CODEPOINT]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And finally, these work internally by indexing the string:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;toupper()&lt;/li&gt;
&lt;li&gt;tolower()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;rsquo;s &amp;ldquo;divide&amp;rdquo; out of the way, now lets conquer.&lt;/p&gt;
&lt;h3 id=&#34;implementing-a-utf-8-awk&#34;&gt;Implementing a UTF-8 Awk&lt;/h3&gt;
&lt;p&gt;A reminder that we are trying to add in UTF-8 support to a existing awk, not
make a new one with UTF-8 support.&lt;/p&gt;
&lt;p&gt;In a awk that is UTF-8 safe, all strings are indexed by a number of UTF-8
characters. While in C, all strings are indexed based off of bytes. This
means that for substr(), length(), match(), and index(). We need a way to
convert between the two. This can be done by two functions, one which counts
the bytes in a utf8 string, and another that counts the characters in a C byte
string. This work was &lt;a href=&#34;https://github.com/raygard/wak/commit/2e94cd3de8fb4d091ca19bb429cb4b2cb9d6a80e&#34;&gt;originally done by me&lt;/a&gt;
with 2 functions that acted as analogs to &lt;code&gt;mbrtowc()&lt;/code&gt; and &lt;code&gt;wcstombs()&lt;/code&gt; from libc.
And &lt;a href=&#34;https://github.com/raygard/wak/commit/2e94cd3de8fb4d091ca19bb429cb4b2cb9d6a80e&#34;&gt;Ray Gardner de-over-engineered&lt;/a&gt; these functions.&lt;/p&gt;
&lt;p&gt;As long as you have the ability to turn unicode codepoints back into strings,
\u[CODEPOINT] is a easy fix too. While the current digit you are reading is a
valid hexidecimal character, read that digit into a buffer. Then &lt;code&gt;strtol()&lt;/code&gt; to
turn that buffer into a codepoint, then convert that codepoint back into a string.
There are printf format escapes that print 1 utf8 character of a string.
Which in practice makes printf %c easier. The tolower() and toupper()
problem is more complex, but fundamentally involves taking a string, running
though it and running &lt;code&gt;towlower/upper()&lt;/code&gt; on it, expanding it when needed.
You can look at &lt;a href=&#34;https://github.com/raygard/wak/commit/2e94cd3de8fb4d091ca19bb429cb4b2cb9d6a80e&#34;&gt;the actual code which does this&lt;/a&gt;,
as that will explain it better than I could.&lt;/p&gt;
&lt;p&gt;FS/split() say that if the field separator is more than one character, it will be
treated as a regex. This in practice does not matter, since a multi-byte unicode
FS will never contain any special regexp syntax character.&lt;/p&gt;
&lt;p&gt;Writing in UTF-8 support into a already existing awk is a lot simpler than it seems.
wak needed less than 100 lines to make itself UTF-8 safe. Most of the hard part
is figuring out &lt;em&gt;what&lt;/em&gt; needs unicode handling.&lt;/p&gt;
</description></item>
	
	<item><title>Replacing Neovim with vis</title>
		<link>http://localhost:1313/articles/vis/</link>
		<pubDate>Wed, 17 Apr 2024 00:00:00 &#43;0000</pubDate>
		<description>&lt;p&gt;Lately, I&amp;rsquo;ve been unhappy with neovim and it&amp;rsquo;s bloat. vi is a simple and beautiful tool by
itself, but it&amp;rsquo;s most popular deviation vim has been bloated to the point of being unmanageable
the same way perl took the design of awk or C++ took the design of C and destroyed it.&lt;/p&gt;
&lt;p&gt;Neovim remedies this, but not by much. And in place it adds more bloat. And it&amp;rsquo;s decision
on removing build configuration means that it can&amp;rsquo;t be de-bloated in the spirit of tiny vim
builds.&lt;/p&gt;
&lt;p&gt;And the worst part of this, some of the bloat is actually useful. Bloated software has the
problem of &amp;ldquo;Everyone only uses 20%, but it&amp;rsquo;s always a different 20%&amp;rdquo;. This makes the minimal
vi implementations hard to use. I &lt;em&gt;want&lt;/em&gt; syntax highlighting and colorization, I &lt;em&gt;want&lt;/em&gt; the
ability to batch process data with ex commands.  I &lt;em&gt;want&lt;/em&gt; the ability to select things with
visual mode. This disqualifies implementations like nextvi, nvi, and busybox vi.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://kakoune.org/&#34;&gt;Kakoune&lt;/a&gt; seems like a good alternative, with two massive problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s written in C++&lt;/li&gt;
&lt;li&gt;Constant compatibility breaks, this is a vi clone only in name&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I generally &lt;a href=&#34;https://harmful.cat-v.org/software/c++/&#34;&gt;don&amp;rsquo;t trust C++ coders&lt;/a&gt; with writing minimal software.
And the willingness to break everything is probably a way of venting the fact that C++&amp;rsquo;s selling point is
the fact that it&amp;rsquo;s C compatible, and that restricts the language massively.&lt;/p&gt;
&lt;p&gt;What does this leave? There is apparently one editor called &lt;a href=&#34;https://github.com/martanne/vis&#34;&gt;vis&lt;/a&gt;
that&amp;rsquo;s minimal, has a large amount of vim-isms, and is written in pure C with configuration able to
be done in lua. It only takes up a couple megabytes of space, while vim takes up 60 and neovim takes
up 40. It lacks things like the s, g, and v ex commands in favor of multi-cursor editing.&lt;/p&gt;
&lt;p&gt;vis also has inbuilt syntax highlighting, with a &lt;a href=&#34;https://github.com/martanne/vis/wiki/Themes&#34;&gt;selection of themes to use&lt;/a&gt;.
vis has inbuilt options for line numbering (including relative line numbering), tab to space conversion
And autoindenting (Although, Not very good autoindenting). It also has a semi-customize-able
status and keybindings bar via the lua API.&lt;/p&gt;
&lt;p&gt;Here are some features that aren&amp;rsquo;t in vis &lt;em&gt;by default&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;gf&amp;rdquo; motion&lt;/li&gt;
&lt;li&gt;Leading whitespace detection&lt;/li&gt;
&lt;li&gt;Some way to spellcheck/auto-complete&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s look at these individually and see what vis can achieve.&lt;/p&gt;
&lt;p&gt;There are &lt;a href=&#34;https://github.com/martanne/vis/wiki/Plugins&#34;&gt;a lot of plugins&lt;/a&gt; to do these things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://repo.or.cz/vis-goto-file.git&#34;&gt;vis-goto-file&lt;/a&gt;: for the &amp;ldquo;gf&amp;rdquo; motion,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/erf/vis-highlight&#34;&gt;vis-highlight&lt;/a&gt;: for leading white-space detection.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/muhq/vis-spellcheck&#34;&gt;vis-spellcheck&lt;/a&gt;: for spellchecking.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are also lua plugins I didn&amp;rsquo;t even know I wanted until now, like the ability to auto-format
and edit markdown tables with &lt;a href=&#34;https://www.thyssentishman.com/git/vis-tables/log.html&#34;&gt;vis-tables&lt;/a&gt;.
And backups that are stored in a reasonable place with &lt;a href=&#34;https://github.com/roguh/vis-backup&#34;&gt;vis-backup&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That is not to say, vis is not without problems. For example, it is convenient to have the
cursor show up as a bar on insert mode, but show as a block on normal mode, so that you can
tell what mode you are in without looking at the status bar. This would normally be a simple
print statement on changing of modes. But for whatever reason (I think due to the fact that
there is multiple cursor support in vis). This does not change anything.&lt;/p&gt;
&lt;p&gt;If you do not like how bloated and large vim and it&amp;rsquo;s forks are. But find the features that
vim provides useful, Vis includes many but not all vim-isms while still being elegant and
versatile.&lt;/p&gt;
</description></item>
	
	<item><title>Making A static site generator with `make`</title>
		<link>http://localhost:1313/articles/makessg/</link>
		<pubDate>Sat, 13 Apr 2024 00:00:00 &#43;0000</pubDate>
		<description>&lt;p&gt;When making my website, generating static webpages for
my blogs and articles was a big concern. I want to be able
to manipulate templates and sytlesheets easily and have that
translate to my articles and content. HTML, to put it simply,
sucks for this work.&lt;/p&gt;
&lt;p&gt;The solution is static site generation, which is analogous to
ahead of time compilation. There are a variety of tools that
can be used for this. &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; is the one GitHub endorses,
the problem I have with that is that it is written in Ruby,
which means that I&amp;rsquo;d have to pull in megabytes of extra
dependencies and slow the building process down for something
that ultimately takes away control from me.&lt;/p&gt;
&lt;p&gt;What I need is something that is efficient, customizable, and
fast. And above all, simplistic. This is where &lt;code&gt;make&lt;/code&gt; comes into
the picture.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make&lt;/code&gt; takes a &amp;ldquo;makefile&amp;rdquo; with a list of rules. Each rule has a
list of commands to run. And you can do &lt;code&gt;make rule&lt;/code&gt; to run the
commands in that rule. If you specify a list of rules, it will
run all those rules, if you specify no rules, it will run the
first rule specified in the makefile (commonly, this rule is
called &amp;ldquo;all&amp;rdquo;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat Makefile
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;foo:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    echo bar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;baz:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    echo foo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make foo baz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo bar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo foo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;foo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Make will list the commands it runs as it runs them, and will
abort if a command returns non-zero. Printing the command it
runs can be disabled by placing &lt;code&gt;@&lt;/code&gt; at the start of the command.
And aborting on failure of a command can be disabled by placing &lt;code&gt;-&lt;/code&gt;
at the start of the command&lt;/p&gt;
&lt;p&gt;Additionally, you can refer to &lt;a href=&#34;https://man7.org/linux/man-pages/man7/environ.7.html&#34;&gt;environment variables&lt;/a&gt; in your makefile,
and assign them on the command line or in your makefile.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat Makefile
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BAZ=123
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;foo:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @echo $(BAR) $(BAZ)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;baz:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -false
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make baz foo BAR=abc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;abc 123
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This allows for macros and the quick running of commands without manually typing
in the build commands. But this is not where the true magic of make is.&lt;/p&gt;
&lt;p&gt;A rule is not just a name for a macro that you type in on the command line,
it is a pattern. And more importantly, it is a filename unless said otherwise.
You can also specify prerequisites for running a rule. So you can say &lt;code&gt;a: b c&lt;/code&gt;,
which means that rule b and c have to run before a. You can specify that a
rule is not a filename by putting a line that says &lt;code&gt;.PHONY: [rule1] [rule2]&lt;/code&gt;.
This means that &lt;code&gt;rule1&lt;/code&gt; and &lt;code&gt;rule2&lt;/code&gt; will always run when called.&lt;/p&gt;
&lt;p&gt;Finally, if a rule:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Is an existing file&lt;/li&gt;
&lt;li&gt;Has prerequisite rules that are all files&lt;/li&gt;
&lt;li&gt;All prerequisite files &amp;ldquo;last changed&amp;rdquo; date are older than the main file&amp;rsquo;s&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The rule is considered completed, and any commands from it are not ran.&lt;/p&gt;
&lt;p&gt;This makes AOT compilation with object files much faster. Since you can
change one file, and it will detect that all the other &amp;ldquo;object files&amp;rdquo; are newer
then their respective source files &lt;em&gt;except&lt;/em&gt; the one you have changed. And it
will automatically build only that changed file.&lt;/p&gt;
&lt;p&gt;But having a rule for each source file seems excessive, right? This is why rules
are patterns. The character &lt;code&gt;%&lt;/code&gt; means &amp;ldquo;anything&amp;rdquo; and is analogous to
&lt;code&gt;*&lt;/code&gt; in shell &lt;a href=&#34;https://man7.org/linux/man-pages/man3/glob.3.html&#34;&gt;globbing&lt;/a&gt;, this allows us to create a rule for all &lt;code&gt;.c&lt;/code&gt; files&lt;/p&gt;
&lt;p&gt;But how will we refer to the source file in the build command? This is why there
are special variables in make; You can use &lt;code&gt;$&amp;lt;&lt;/code&gt; to refer to your first item in
the list of prerequisites, and &lt;code&gt;$@&lt;/code&gt; to refer to your rule name. Note this is
not the pattern that the specified rule matched, it is the rule that matched
the pattern.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;%.o&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; %.c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;$(&lt;/span&gt;CC&lt;span style=&#34;color:#ff7b72&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;$(&lt;/span&gt;CFLAGS&lt;span style=&#34;color:#ff7b72&#34;&gt;)&lt;/span&gt; $&amp;lt; -o &lt;span style=&#34;color:#79c0ff&#34;&gt;$@&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you run &lt;code&gt;make main.o&lt;/code&gt;, it will detect that &amp;ldquo;main.o&amp;rdquo; matches the pattern
rule &amp;ldquo;%.o&amp;rdquo;, next it will check if the file &amp;ldquo;main.c&amp;rdquo; is there. If it is not and
there is no rule that matches &amp;ldquo;main.c&amp;rdquo;, it will not know what to do and fail.
Otherwise, if the file &amp;ldquo;main.c&amp;rdquo; is older than the file &amp;ldquo;main.o&amp;rdquo;, it will assume
no changes have been made and there is therefore nothing to be done. Then, it
will run the build command, refereeing to the variable CC (By default &amp;ldquo;c99&amp;rdquo;),
passing in the flags CFLAGS, and running this on the prerequisite files name
&amp;ldquo;main.c&amp;rdquo; outputting to our rule name, the file &amp;ldquo;main.o&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;This is the essence of &lt;code&gt;make&lt;/code&gt;&amp;rsquo;s functionality, and is the useful stuff POSIX
specifies. But there are other things in GNU make, like the ability to add a
prefix to all items in a list with the addprefix function, or the wildcard
function to get all items and put them in a list. Functions are specified in
variable definitions and arguments are separated by commas. So that evaluating
&lt;code&gt;$(addprefix 123, a b c)&lt;/code&gt; will return &amp;ldquo;123a 123b 123c&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Since the problem of turning markdown files into html files is similar to the
problem of turning source files into object files, we can create a simple rule
that does 99% of our work.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;%.html&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; %.md
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;$(&lt;/span&gt;MARKDOWN&lt;span style=&#34;color:#ff7b72&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;$(&lt;/span&gt;MDFLAGS&lt;span style=&#34;color:#ff7b72&#34;&gt;)&lt;/span&gt; $&amp;lt; &amp;gt;&amp;gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;$@&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But markdown compilers don&amp;rsquo;t usally generate HTML boilerplate, and we might
want to import a stylesheet, and maybe save to a &amp;ldquo;dist&amp;rdquo; directory. So that
if we have a &amp;ldquo;index.md&amp;rdquo; file, it will compile to &lt;code&gt;$(DIST)/index.html&lt;/code&gt;, this
is no issue for us.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;$(DIST)/%.html&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; %.md
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cat &lt;span style=&#34;color:#ff7b72&#34;&gt;$(&lt;/span&gt;TEMPLATES&lt;span style=&#34;color:#ff7b72&#34;&gt;)&lt;/span&gt;/begin.html &amp;gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;$@&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;$(&lt;/span&gt;MARKDOWN&lt;span style=&#34;color:#ff7b72&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;$(&lt;/span&gt;MDFLAGS&lt;span style=&#34;color:#ff7b72&#34;&gt;)&lt;/span&gt; $&amp;lt; &amp;gt;&amp;gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;$@&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cat &lt;span style=&#34;color:#ff7b72&#34;&gt;$(&lt;/span&gt;TEMPLATES&lt;span style=&#34;color:#ff7b72&#34;&gt;)&lt;/span&gt;/end.html &amp;gt;&amp;gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;$@&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice how % goes after the &lt;code&gt;$(DIST)&lt;/code&gt; prefix, which means that referencing
it in our prerequisite list will not add it as a prefix.&lt;/p&gt;
&lt;p&gt;We have our workhorse rule, but, &amp;ldquo;how do we put this together?&amp;rdquo;,
we can specify variables for our markdown compiler (in this example, I used
&lt;code&gt;lowdown&lt;/code&gt;), and scan for files in a source directory using
the wildcard command. Making them valid rule names by substituting .md prefixes
with .html ones, and adding the prefix &lt;code&gt;$(DIST)&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;DIST&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;dist
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;TEMPLATES&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;templ
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;MARKDOWN&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;lowdown
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;PAGES&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;$(&lt;/span&gt;wildcard pages/*.md&lt;span style=&#34;color:#ff7b72&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;PDEST&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;$(&lt;/span&gt;addprefix &lt;span style=&#34;color:#ff7b72&#34;&gt;$(&lt;/span&gt;DIST&lt;span style=&#34;color:#ff7b72&#34;&gt;)&lt;/span&gt;/, &lt;span style=&#34;color:#ff7b72&#34;&gt;$(&lt;/span&gt;patsubst %.md, %.html, &lt;span style=&#34;color:#ff7b72&#34;&gt;$(&lt;/span&gt;PAGES&lt;span style=&#34;color:#ff7b72&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# ${VAR} breaks down VAR into a list of rules
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;all&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; ${PDEST}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;$(DIST)/%.html&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; pages/%.md
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cat &lt;span style=&#34;color:#ff7b72&#34;&gt;$(&lt;/span&gt;TEMPLATES&lt;span style=&#34;color:#ff7b72&#34;&gt;)&lt;/span&gt;/begin.html &amp;gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;$@&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;$(&lt;/span&gt;MARKDOWN&lt;span style=&#34;color:#ff7b72&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;$(&lt;/span&gt;MDFLAGS&lt;span style=&#34;color:#ff7b72&#34;&gt;)&lt;/span&gt; $&amp;lt; &amp;gt;&amp;gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;$@&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cat &lt;span style=&#34;color:#ff7b72&#34;&gt;$(&lt;/span&gt;TEMPLATES&lt;span style=&#34;color:#ff7b72&#34;&gt;)&lt;/span&gt;/end.html &amp;gt;&amp;gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;$@&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you want to add a conditional generation step for the index, you
can put a &lt;code&gt;if [ $@ = $(DIST)/index.html ]; then ./gen &amp;gt;&amp;gt; $@; fi&lt;/code&gt; rule in
your main rule. You can add almost infinite customization to this with
conditionals or extra rules.&lt;/p&gt;
&lt;p&gt;Additional Resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/make/manual/make.pdf&#34;&gt;GNU make manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pedantic.software/git/blogit&#34;&gt;blogit, another makefile based SSG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description></item>
	
	</channel>
</rss>
